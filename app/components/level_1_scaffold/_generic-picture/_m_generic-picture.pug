mixin generic-picture(genericPicture_props)
  -
    const _VIEWPORTS = {
      S: '(max-width: 767px)',
      M: '(max-width: 1199px)',
      L: '(max-width: 1919px)',
      OM: '(min-width: 768px) and (max-width: 1199px)',
      OL: '(min-width: 1200px) and (max-width: 1919px)',
    };
    const getPictureData = function (props) {
      const { path, mediaSet } = props;
      const lastIndex = mediaSet.length - 1;
      let finalSet = { srcset: '', sizes: '' };

      finalSet.src = `img/${path}@${mediaSet[lastIndex]}.jpg`;

      for (let i = 0; i <= lastIndex; i += 1) {
        if (i < lastIndex) {
          const [mq, width] = mediaSet[i];
          const srcToAdd =
            `img/${path}@${width}.jpg ${width}w, `;
          const sizeToAdd = `${_VIEWPORTS[mq]} ${width}px, `;
          finalSet.srcset += srcToAdd;
          finalSet.sizes += sizeToAdd;
        } else {
          const srcToAdd =
            `img/${path}@${mediaSet[i]}.jpg ${mediaSet[i]}w`;
          finalSet.srcset += srcToAdd;
          finalSet.sizes += `${mediaSet[i]}px`;
        }
      }

      return finalSet;
    };
    const { srcset, sizes, src } = getPictureData(genericPicture_props);

  picture(class=[
    'generic-picture',
    (
      attributes.modifier
      ? `generic-picture--${modifier}`
      : null
    ),
    attributes.class,
  ])
    img.generic-picture__image(
      srcset=srcset,
      sizes=sizes,
      src=src,
      alt=genericPicture_props.alt,
    )
